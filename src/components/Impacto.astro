---
interface Props {
	title: string;
}
const { title } = Astro.props;

---

<!-- Contenedores para las barras de progreso -->
<div class="bg-[url('/images/etica.jpg')] bg-cover bg-no-repeat bg-center w-full">
    <div class=" backdrop-opacity-45 bg-blue-gray-900/50 w-full py-6 sm:py-8 lg:py-12">
        <h2 class="mb-8 text-center text-3xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-white">{title}</h2>
        <div class="mx-auto px-10 lg:px-20 max-w-full-xl">
            <div class="grid gap-0 md:grid-cols-2 lg:grid-cols-4 lg:gap-4">
                <div class="progress-container" id="progress1"></div>
                <div class="progress-container" id="progress2"></div>
                <div class="progress-container" id="progress3"></div>
                <div class="progress-container" id="progress4"></div>
            </div>
        </div>
    </div>
</div>





<style>
    .progress-container {
        font-family: 'Evolventa', sans-serif;
        font-size: 2.5rem;
        text-align: center;
        margin: 20px auto;
        width: 230px;
        height: 230px;
        position: relative;
        border: 1px solid #ffffff;
        padding: 20px;
        border-radius: 50%;
    }
</style>


<script>

    gsap.registerPlugin(ScrollTrigger);
    import gsap from "gsap";
    import { ScrollTrigger } from "gsap/ScrollTrigger";
    import ProgressBar from 'progressbar.js';

    let progressBars: any = {}; // Guardar referencias a las barras de progreso

    // Función para crear una barra de progreso
    //@ts-ignore
    function createProgressBar(containerId, endValue, ratioValue, nameValue ) {
        const container = document.getElementById(containerId);

        if (!container) {
            console.error(`Container with ID ${containerId} not found.`);
            return; // Exit the function if the container is not found
        }

        var bar = new ProgressBar.Circle(container, {
            color: '#fff',
            strokeWidth: 4,
            easing: 'easeInOut',
            duration: 1400,
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: null,
            text: {
                autoStyleContainer: false
            },
            from: { color: '#aaa' },
            to: { color: '#ec4899' },
            // Set default step function for all animate calls
            step: function(state, circle) {
                //@ts-ignore
                circle.path.setAttribute('stroke', state.color);

                var value = Math.round(circle.value() * ratioValue);
                if (value === 0) {
                    //@ts-ignore
                    circle.setText('');
                } else {
                    //@ts-ignore
                    circle.setText('<p style="font-weight: bold;">' + formatNumber(value) + '</p>' + '<p style="font-size: .8rem;">' + nameValue + '</p>');
                }

            }
        });

        //bar.animate(1.0);  // Number from 0.0 to 1.0
        // Animar la barra de progreso al 0% al principio
        bar.set(0);


        // Crear un ScrollTrigger para animar la barra de progreso con el desplazamiento
        ScrollTrigger.create({
            trigger: container, // Contenedor de referencia para el desplazamiento
            start: "top 80%", // Iniciar la animación cuando el 80% superior del contenedor está en la vista
            end: "bottom 20%", // Finalizar la animación cuando el 20% inferior del contenedor está en la vista
            onEnter: function() {
                bar.animate(endValue); // Animar la barra de progreso al 100% al entrar
            },
            onLeaveBack: function() {
                bar.animate(0.0); // Reiniciar la animación de la barra de progreso al 0% al salir
            },
            id: `progress-${containerId}` // Etiqueta el ScrollTrigger
        });

        // Guardar la referencia de la barra de progreso para poder limpiarla después
        progressBars[containerId] = bar;
 
    }


    function initializeProgressBars() {
        createProgressBar('progress1', 1.0, 21, 'OSC');
        createProgressBar('progress2', 1.0, 2625, 'Familias alcanzadas');
        createProgressBar('progress3', 1.0, 10500, 'Cantidad de personas beneficiadas');
        createProgressBar('progress4', 1.0, 4019, 'Kilos de alimentos donados');
    }

    function destroyProgressBars() {
        // Limpiar solo los ScrollTriggers etiquetados con 'progress-'
        ScrollTrigger.getAll().forEach(trigger => {
            console.log('trigger vars', trigger.vars.id);
            if (trigger.vars.id && trigger.vars.id.startsWith('progress-')) {
                trigger.kill();
            }
        });

        // Destruir todas las barras de progreso
        for (let id in progressBars) {
            if (progressBars[id]) {
                progressBars[id].destroy();
                delete progressBars[id];
            }
        }
    }

    //@ts-ignore
    function formatNumber(value) {
        return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    document.addEventListener('astro:page-load', () => {
        destroyProgressBars();
        initializeProgressBars();
    });
</script>